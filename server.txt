//https://accounts.spotify.com/authorize?response_type=code&client_id=1edbfca887d64a58aa1a4277bc7700d4&scope=user-read-private%20user-read-email&redirect_uri=http://localhost:8888/callback
//https://developer.spotify.com/documentation/general/guides/authorization/code-flow/

const express = require('express');
const querystring = require('querystring')
const path = require('path');
const request = require('request');
const { get } = require('request');
// var cors = require('cors');
// var cookieParser = require('cookie-parser');

var client_id = 'cfcd833e53804db59fcd58d4379c202d';
var client_secret = '7759cf9b4c1c40e59dfe5295f70e44c2'
var redirect_uri = 'http://localhost:3000/callback'

//configuration?
const app = express();                                      //express
const PORT = process.env.PORT || 3000;                      //or simple localhost:8888
app.use(express.static(path.join(__dirname, 'public'))) //.use(cors()).use(cookieParser());    //directory set?

//for getting data
let access_token;
let refresh_token;
let getExpiration;

let count = 0;

//generate random for state 'security?'
const generateRandomString = (length) => {
    let text = ''
    let string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
    for (let i = 0; i < length; i++){
        text += string.charAt(Math.floor(Math.random() * string.length))
    }
    return text;
}

/*----------------------------------------------------------------*/

app.get('/login', (req, res) => {
    var scope = `
    
    user-read-playback-state user-modify-playback-state user-read-currently-playing
    playlist-read-private playlist-read-collaborative playlist-modify-private playlist-modify-public
    
    user-read-playback-position user-top-read user-read-recently-played
    user-library-modify user-library-read
    user-read-email user-read-private user-follow-modify user-follow-read
    ` 
    // ugc-image-upload 
    var state = generateRandomString(15)

    res.redirect('https://accounts.spotify.com/authorize?' + 
        querystring.stringify({
            response_type: 'code',
            client_id: client_id,
            scope: scope,
            redirect_uri: redirect_uri,
            state: state
        }));
});

app.get('/callback', (req, res) => {

    //this is the url after successful log in: code and state
    var code = req.query.code || null;
    let state = req.query.state || null;

    //most of this is copied from spotify api example: https://developer.spotify.com/documentation/general/guides/authorization/code-flow/
    if (state === null || code === null){
        res.redirect('/#' + querystring.stringify({
            error: 'state_mismatch'
        }));
    }
    else {
        var authOptions = {
            url: 'https://accounts.spotify.com/api/token',
            form: {
                code: code,
                redirect_uri: redirect_uri,
                grant_type: 'authorization_code'
            },
            headers: {
                'Authorization': 'Basic ' + (Buffer.from(client_id + ':' + client_secret).toString('base64'))
            },
            json: true
        };
    }

    request.post(authOptions, (error, response, body) => {

        if (error || response.statusCode != 200){
            console.log('error')
            res.redirect('/#' + querystring.stringify({
                error: 'invalid_token'
            }))
        } 
        else {
            access_token = body.access_token;
            refresh_token = body.refresh_token;
            getExpiration = body.expires_in;

            //AUTO REFRESH TOKEN
            setInterval(refreshTokenFunc, (60 * 20) * 1000)

            res.redirect('/spotify/home')
        }

        console.log('/callback >>\n', body)
    })
})

async function refreshTokenFunc(){
    count++
    console.log('\nTIME:',count,'\n')
    
    let authOptions = {
        url: 'https://accounts.spotify.com/api/token',
        headers: {
            'Authorization': 'Basic ' + (Buffer.from(client_id + ':' + client_secret).toString('base64'))
        },
        form: {
            grant_type: 'refresh_token',
            refresh_token: refresh_token
        },
        json: true
    };
     
    request.post(authOptions, (error, response, body) => {
        if (error || response.statusCode !== 200){
            console.log('error')
        }
    })
}

/*----------------------------------------------------------------*/

//sign up
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/public/signup.html')
})

//transfers access token
app.get('/get_token', (req, res) => {
    res.json(access_token)
})

//returns me info
app.get('/me', (req, res) => {

    let options = {
        url: 'https://api.spotify.com/v1/me',
        headers: { 'Authorization': 'Bearer ' + access_token },
        json: true
    }

    request.get(options, (error, response, body) => {
        res.json(body)
    });

});
app.get('/profile', (req, res) => {
    res.sendFile(__dirname + `/public/profile.html`)
})
app.get('/signup', (req, res) => {
    res.sendFile(__dirname + `/public/signup.html`)
})

app.get('/spotify/:name', (req, res) => {
    res.sendFile(__dirname + `/public/${req.params.name}.html`)
})

app.get('/other/playlist/:name', (req, res) => {
    res.sendFile(__dirname + `/public/other-playlist.html`)
})
app.get('/other/artist/:name', (req, res) => {
    res.sendFile(__dirname + `/public/other-artist.html`)
})
app.get('/other/album/:name', (req, res) => {
    res.sendFile(__dirname + `/public/other-album.html`)
})
app.get('/other/genre/:name', (req, res) => {
    res.sendFile(__dirname + `/public/other-genre.html`)
})

//for general nav bar playlist 
let playlistIdUrl;
app.get('/playlist/:number', (req, res) => {
    playlistIdUrl = req.params.number
    res.sendFile(__dirname + '/public/navbar-playlists.html')
})

//get playlist nav bar URL
app.get('/getPlaylistURL', (req, res) => {
    res.json(playlistIdUrl)
})

console.log('listening on 3000')
app.listen(PORT)